/* DEVGAMINGFR AIM HELPER.gpc
 
 ░█████╗░██╗███╗░░░███╗  ██╗░░██╗███████╗██╗░░░░░██████╗░███████╗██████╗░
 ██╔══██╗██║████╗░████║  ██║░░██║██╔════╝██║░░░░░██╔══██╗██╔════╝██╔══██╗
 ███████║██║██╔████╔██║  ███████║█████╗░░██║░░░░░██████╔╝█████╗░░██████╔╝
 ██╔══██║██║██║╚██╔╝██║  ██╔══██║██╔══╝░░██║░░░░░██╔═══╝░██╔══╝░░██╔══██╗
 ██║░░██║██║██║░╚═╝░██║  ██║░░██║███████╗███████╗██║░░░░░███████╗██║░░██║
 ╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝  ╚═╝░░╚═╝╚══════╝╚══════╝╚═╝░░░░░╚══════╝╚═╝░░╚═╝
 
       - COLD WAR & MODERN WARFARE AIM HELPER by DEVGAMINGFR -
 
                ******OPEN AIM HELPER MENU = L1/LB and UP Dpad to enter menu******
                
 ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
 ★                                             TOGGLES ON/OFF                                                 ☆
  ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
   
   - Extreme Aim Help                    = L1/LB + XB1 Menu button/PS4 Option button
    - RapidFire                          = L1/LB + LEFT Dpad
    - BurstShot                          = L1/LB + DOWN Dpad
    - Dropshot                           = L1/LB + RIGHT Dpad
    - AutoRun                            = L1/LB + R3/RS
    - Easy Slide                         = L3/LS in game with autorun enabled it will automatically slide
    - Strafe Shot                        = CROSS/A + CIRCLE/B + DOWN
    - Anti Recoil #1                     = CIRCLE/B + LEFT *SkyBlue LED*
    - Anti Recoil #2                     = CIRCLE/B + DOWN *White LED*
    - Anti Recoil #3                     = CIRCLE/B + RIGHT *Pink LED*
    - Anti Recoil #4                     = CIRCLE/B + UP *Blue LED*
    - Flipped Triggers                   = OFF by Default if you want to use L1/R1 flip Layout on Line 51 - 55
    - Auto Hold Breath                   = TRUE/FALSE (set down below)
    - Kill Switch                        = hold L2/LT or L1/LB and tap Share/View (Red LED)
  
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄ ▄

  ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆  
 ☆                        *******CLOSE AIM HELPER MENU = Hold L1/LB and UP Dpad to enter menu                   ☆
 ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★ 
|       BUTTON LAYOUT (change your layout here) 
*/                        
    define PS = 0;
    define SHARE = 1;
    define OPTIONS = 2;
    define R1 = 4; //Change to 3 For flipped 
    define R2 = 3; //Change to 4 For flipped              
    define R3 = 5;                                        
    define L1 = 7; //Change to 6 For flipped            
    define L2 = 6; //Change to 7 For flipped 
    define L3 = 8;
    define RX = 9;
    define RY = 10;
    define LX = 11;
    define LY = 12;
    define UP = 13;
    define DOWN = 14;
    define LEFT = 15;
    define RIGHT = 16;
    define TRIANGLE = 17;
    define CIRCLE = 18;
    define CROSS = 19;
    define SQUARE = 20
    define TOUCHPAD = 27;

/* 
   _____   _    _    _____   _______    ____    __  __   _____   ______             ____    _        ______ 
  / ____| | |  | |  / ____| |__   __|  / __ \  |  \/  | |_   _| |___  /     /\     |  _ \  | |      |  ____|
 | |      | |  | | | (___      | |    | |  | | | \  / |   | |      / /     /  \    | |_) | | |      | |__   
 | |      | |  | |  \___ \     | |    | |  | | | |\/| |   | |     / /     / /\ \   |  _ <  | |      |  __|  
 | |____  | |__| |  ____) |    | |    | |__| | | |  | |  _| |_   / /__   / ____ \  | |_) | | |____  | |____ 
  \_____|  \____/  |_____/     |_|     \____/  |_|  |_| |_____| /_____| /_/    \_\ |____/  |______| |______|                                                                                                                                                                                                                     
             
                                    TRUE/FALSE TOGGLES BELOW
*/
 
//☆★☆★☆★ DEVGAMINGFRAntiRecoil Presets ☆★☆★☆★\\
//       AR Value       AR Horizontal            //
//         17                -20  = M13          //
//         18                -12  = M4AI         // *DEVGAMINGFR settings the settings I use*
//         33                -1   = Mac-10           

//★☆★☆★ AntiRecoil Settings ★☆★☆★\\
int DEVGAMINGFRAntiRecoil_1 = FALSE;
define AR_Value1 = 24; //SkyBlue LED
define AR_H = -8; //Anti Recoil Horizontal

int DEVGAMINGFRAntiRecoil_2 = FALSE;                  //*DEVGAMINGFR settings for M4A1 
define AR_Value2 = 18; //White LED
define AR_H2 = -12; //Anti Recoil Horizontal        

int DEVGAMINGFRAntiRecoil_3 = FALSE;
define AR_Value3 = 30; //Pink LED
define AR_H3 = -1; //Anti Recoil Horizontal

int DEVGAMINGFRAntiRecoil_4 = FALSE;                 //*DEVGAMINGFR settings for the Mac-10
define AR_Value4 = 33; //Blue LED
define AR_H4 = -1; //Anti Recoil Horizontal

int DEVGAMINGFRAntiRecoil_Horizontal;


//☆★☆★☆★ Inverted Settings ☆★☆★☆★\\
int Invert_Look = 1; //Change 1 to -1 If you play with Inverted


//☆★☆★☆★ Hair Triggers ☆★☆★☆★\\
int HairTrigger_R2 = FALSE;
int HairTrigger_L2 = FALSE;


//☆★☆★☆★ AIM ABUSE Settings ☆★☆★☆★\\
int AimAbuse = TRUE;
int AP = 21;    //Increse to make the aim sticky (might cause screen shake)
int AM = -21.30;
int Delay = 19;
int ARelease = 21;


//☆★☆★☆★ Rapid Fire Settings ☆★☆★☆★\\
int RapidFire = FALSE;
int RapidFire_Speed = 40; //Rapid Fire Speed


//☆★☆★☆★ Dropshot Settings ☆★☆★☆★\\
int Dropshot = FALSE;
int Drop_Speed = 60; //How long until you prone when shooting


//☆★☆★☆★ Auto Run Settings ☆★☆★☆★\\
int AutoRun = FALSE;
int Easy_Slide = TRUE;
int Autorun_Thresh = -80; // Amount of movement until autorun kicks in


//☆★☆★☆★ Burst Fire Settings ☆★☆★☆★\\
int BurstFire = FALSE;
int BurstFire_Speed = 340; //Burst Fire Speed


//☆★☆★☆★ Sensitivity Settings ☆★☆★☆★\\
int Custom_Sensitivity = TRUE;
int GEN_SENS = 100;
int ADS_SENS = 100;
int FIRE_SENS = 100;
int ADS_FIRE_SENS = 100;
int GRENADE_SENS = 100;


//☆★☆★☆★ Auto Hold Breath Settings ☆★☆★☆★\\ 
int Hold_Breath = FALSE;    


//☆★☆★☆★ DEVGAMINGFR Target tracking Settings ☆★☆★☆★\\
int Target_Tracker = TRUE;
int AimingSpeed = 96;   


//☆★☆★☆★ Strafe Settings ☆★☆★☆★\\
int Strafe = FALSE; 	// TRUE = enable this feature, FALSE = disable this feature
int Strafe_Shot_Time  = 130;  	// Amount of time you go to the sides


//☆★☆★☆★ Flipped Triggers Settings ☆★☆★☆★\\ [IF YOU WANT TO SHOOT WITH L2/R2 FLIP TRIGGERS IN GAME]
main {
 
    swap(PS4_R1,PS4_R2);
    swap(PS4_L1,PS4_L2);}

/*
  _____     ____    _   _   _______     _______    ____    _    _    _____   _    _ 
 |  __ \   / __ \  | \ | | |__   __|   |__   __|  / __ \  | |  | |  / ____| | |  | |
 | |  | | | |  | | |  \| |    | |         | |    | |  | | | |  | | | |      | |__| |
 | |  | | | |  | | | . ` |    | |         | |    | |  | | | |  | | | |      |  __  |
 | |__| | | |__| | | |\  |    | |         | |    | |__| | | |__| | | |____  | |  | |
 |_____/   \____/  |_| \_|    |_|         |_|     \____/   \____/   \_____| |_|  |_|
*/
int Toggle_Menu;
int Toggle_Rumble;
int Remove_BTTN;
int KillSwitch;
int USE_SENS;
int ARS
int AR;
    
/*
  __  __              _____   _   _     ____    _         ____     _____   _  __
 |  \/  |     /\     |_   _| | \ | |   |  _ \  | |       / __ \   / ____| | |/ /
 | \  / |    /  \      | |   |  \| |   | |_) | | |      | |  | | | |      | ' / 
 | |\/| |   / /\ \     | |   | . ` |   |  _ <  | |      | |  | | | |      |  <  
 | |  | |  / ____ \   _| |_  | |\  |   | |_) | | |____  | |__| | | |____  | . \ 
 |_|  |_| /_/    \_\ |_____| |_| \_|   |____/  |______|  \____/   \_____| |_|\_\                                                                                                                                                                                                        
*/

main {

LED(0,0,0,0);

if(Custom_Sensitivity)
    if(!get_val(L2) && !get_val(R2)) { 
    USE_SENS=GEN_SENS;}
    else if(get_val(L2) && !get_val(R2)) { 
    USE_SENS=ADS_SENS;}    
    else if(!get_val(L2) && get_val(R2)) { 
    USE_SENS=FIRE_SENS;}
    else if(get_val(L2) && get_val(R2)) { 
    USE_SENS=ADS_FIRE_SENS;}
    else if(get_val(R1)) { 
    USE_SENS=GRENADE_SENS;}
    sensitivity(RY,NOT_USE,USE_SENS);
    sensitivity(RX,NOT_USE,USE_SENS);

/*
  _  __  _____   _        _           _____  __          __  _____   _______    _____   _    _ 
 | |/ / |_   _| | |      | |         / ____| \ \        / / |_   _| |__   __|  / ____| | |  | |
 | ' /    | |   | |      | |        | (___    \ \  /\  / /    | |      | |    | |      | |__| |
 |  <     | |   | |      | |         \___ \    \ \/  \/ /     | |      | |    | |      |  __  |
 | . \   _| |_  | |____  | |____     ____) |    \  /\  /     _| |_     | |    | |____  | |  | |
 |_|\_\ |_____| |______| |______|   |_____/      \/  \/     |_____|    |_|     \_____| |_|  |_|                                                                                                                                                                                                                                                                                                                                                                                                                                                        
*/

    if(get_val(L2) && event_press(SHARE)) {
    set_val(SHARE,0);
    KillSwitch=!KillSwitch;
    
    if(KillSwitch) 
    AutoRun = FALSE;
    Dropshot = FALSE;
    RapidFire = FALSE;
    Toggle_Menu = FALSE;
    BurstFire = FALSE;
    Strafe = FALSE;
    combo_run (Flash_OFF);}
    
    if(event_press(SHARE)) {
    Remove_BTTN=!Remove_BTTN;}
    set_val(SHARE,0);
/*
   _____    _____   _____    _____   _____    _______     __  __    ____    _____     _____ 
  / ____|  / ____| |  __ \  |_   _| |  __ \  |__   __|   |  \/  |  / __ \  |  __ \   / ____|
 | (___   | |      | |__) |   | |   | |__) |    | |      | \  / | | |  | | | |  | | | (___  
  \___ \  | |      |  _  /    | |   |  ___/     | |      | |\/| | | |  | | | |  | |  \___ \ 
  ____) | | |____  | | \ \   _| |_  | |         | |      | |  | | | |__| | | |__| |  ____) |
 |_____/   \_____| |_|  \_\ |_____| |_|         |_|      |_|  |_|  \____/  |_____/  |_____/ 
*/ 
// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★\\
    
    if(DEVGAMINGFRAntiRecoil_1){
    LED(3,0,3,0)
    AR = AR_Value1;
    DEVGAMINGFRAntiRecoil_Horizontal = AR_H;}
    if(DEVGAMINGFRAntiRecoil_2) {
    LED(3,3,3,3)
    AR = AR_Value2;
    DEVGAMINGFRAntiRecoil_Horizontal = AR_H2;}
    if(DEVGAMINGFRAntiRecoil_3) {
    LED(0,0,0,3)
    AR = AR_Value3;
    DEVGAMINGFRAntiRecoil_Horizontal = AR_H3;}
    if(DEVGAMINGFRAntiRecoil_4) {
    LED(3,0,0,0)
    AR = AR_Value4;
    DEVGAMINGFRAntiRecoil_Horizontal = AR_H4;}

    if(DEVGAMINGFRAntiRecoil_1)
    if(get_val(L2) && get_val(R2))
    {combo_run(AR);}
 
    if(abs(get_val(RY)) > AR + 2 || abs(get_val(RX)) > AR + 2)
     {combo_stop(AR);}

    if(DEVGAMINGFRAntiRecoil_2)
    if(get_val(L2) && get_val(R2))
    {combo_run(AR);}
 
    if(abs(get_val(RY)) > AR + 2 || abs(get_val(RX)) > AR + 2)
     {combo_stop(AR);}

    if(DEVGAMINGFRAntiRecoil_3)
    if(get_val(L2) && get_val(R2))
    {combo_run(AR);}
    
     if(abs(get_val(RY)) > AR + 2 || abs(get_val(RX)) > AR + 2)
     {combo_stop(AR);}
     
    if(DEVGAMINGFRAntiRecoil_4)
    if(get_val(L2) && get_val(R2))
    {combo_run(AR);}
    
     if(abs(get_val(RY)) > AR + 2 || abs(get_val(RX)) > AR + 2)
     {combo_stop(AR);}
// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★\\
    if(Hold_Breath) // Hold Breath
    if(get_val(L2)) set_val(L3,100);
    if(Hold_Breath)
    if(get_val(LY) <-90 && get_val(L2) && get_ptime(L2) > 200) combo_stop(Hold_Breath_);
    if(Hold_Breath)
    if(event_press(L2)) combo_run(Hold_Breath_);
    if(Hold_Breath)
    if(get_val(L2) && get_lval(L3)) set_val(L3,0);    


    if(HairTrigger_R2) //HairTrigger_R2
    if(get_val(R2))
    set_val(R2, 100);

    if(HairTrigger_L2) //HairTrigger_L2
    if(get_val(L2))
    set_val(L2, 100)

// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★\\

    if(AutoRun) //AutoRun
    if(get_val(LY)< Autorun_Thresh)
    	combo_run(Auto_Run);
    	
// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★\\

    if (AutoRun) //Easy Slide
    if (Easy_Slide)
    if(get_val(LY)< Autorun_Thresh && get_val(L3))
        set_val(CIRCLE, 100);
        
// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★\\

    if(Target_Tracker) //Aim Tracker
    if(get_val(L2) && get_val(R2))
    sensitivity(RX,0,AimingSpeed); 
    sensitivity(RY,0,AimingSpeed);
    
// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★\\

	if(AimAbuse) //AimAbuse Mod
    if(get_val(L2)) combo_run(AS);

// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★\\

    if(RapidFire && get_val(R2)) //RapidFire Mod
    	combo_run(RF);

// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★\\

    if(BurstFire && get_val(R2)) //BurstFire Mod
    combo_run(Burst);

// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★\\

    if(Strafe) //Strafe Mod
    if(get_val(PS4_L2) && get_val(PS4_R2))
        combo_run(Strafe_Shot);
    else
        combo_stop(Strafe_Shot);

// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★\\
    
    if(Dropshot && get_val(R2) && get_ptime(R2) > Drop_Speed) //Dropshot Mod
    set_val(CIRCLE,100);

// ★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★☆★★☆★☆★☆\\

/*
  __  __   ______   _   _   _    _     _______    ____     _____    _____   _        ______    _____ 
 |  \/  | |  ____| | \ | | | |  | |   |__   __|  / __ \   / ____|  / ____| | |      |  ____|  / ____|
 | \  / | | |__    |  \| | | |  | |      | |    | |  | | | |  __  | |  __  | |      | |__    | (___  
 | |\/| | |  __|   | . ` | | |  | |      | |    | |  | | | | |_ | | | |_ | | |      |  __|    \___ \ 
 | |  | | | |____  | |\  | | |__| |      | |    | |__| | | |__| | | |__| | | |____  | |____   ____) |
 |_|  |_| |______| |_| \_|  \____/       |_|     \____/   \_____|  \_____| |______| |______| |_____/                                                                                                      
*/                                                                                                    

if(get_val(L2) && event_press(UP)) { // Toggle Menu
   Toggle_Menu=!Toggle_Menu;
    Toggle_Rumble=!Toggle_Rumble;}
    if(Toggle_Rumble) 
    combo_run(Menu_Rumble);
    
    if(Toggle_Menu) { // LED when in Toggle Menu
    combo_run(RainbowLED);
    
    if(get_val(L2) && event_press(LEFT)) { //How to turn on/off RapidFire
    RapidFire=!RapidFire;
    BurstFire = FALSE;
    if(RapidFire) combo_run(Flash_ON); 
    else combo_run(Flash_OFF);}
    
    if((get_val(CROSS) && get_val(CIRCLE)) && event_press(DOWN)){ // Strafe shot
    Strafe = !Strafe;
    if(Strafe) combo_run(Flash_ON); 
    else combo_run(Flash_OFF);}
    
    if(get_val(L2) && event_press(DOWN)) { //How to turn on/off BurstFire
    BurstFire=!BurstFire;
    RapidFire = FALSE;
    if(BurstFire) combo_run(Flash_ON); 
    else combo_run(Flash_OFF);}
    
    if(get_val(L2) && event_press(RIGHT)) { //How to turn on/off Dropshot
    Dropshot=!Dropshot;
    if(Dropshot) combo_run(Flash_ON); 
    else combo_run(Flash_OFF);}
    
    if(get_val(L2) && event_press(R3)) { //How to turn on/off AutoRun
    AutoRun=!AutoRun;
    if(AutoRun) combo_run(Flash_ON); 
    else combo_run(Flash_OFF);}
    
    if(get_val(CIRCLE) && event_press(LEFT)) { //How to turn on/off DEVGAMINGFRAntiRecoil
    DEVGAMINGFRAntiRecoil_1 = !DEVGAMINGFRAntiRecoil_1;
    DEVGAMINGFRAntiRecoil_2 = FALSE;
    DEVGAMINGFRAntiRecoil_3 = FALSE;
    DEVGAMINGFRAntiRecoil_4 = FALSE;
    if(DEVGAMINGFRAntiRecoil_1) combo_run(Flash_ON); 
    else combo_run(Flash_OFF);}

    if(get_val(CIRCLE) && event_press(DOWN)) { //How to turn on/off Second set of DEVGAMINGFRAntiRecoil
    DEVGAMINGFRAntiRecoil_2 = !DEVGAMINGFRAntiRecoil_2;
    DEVGAMINGFRAntiRecoil_1 = FALSE;
    DEVGAMINGFRAntiRecoil_3 = FALSE;
    DEVGAMINGFRAntiRecoil_4 = FALSE;
    if(DEVGAMINGFRAntiRecoil_2) combo_run(Flash_ON); 
    else combo_run(Flash_OFF);}

    if(get_val(CIRCLE) && event_press(RIGHT)) { //How to turn on/off Third set of DEVGAMINGFRAntiRecoil
    DEVGAMINGFRAntiRecoil_3 = !DEVGAMINGFRAntiRecoil_3;
    DEVGAMINGFRAntiRecoil_2 = FALSE;
    DEVGAMINGFRAntiRecoil_1 = FALSE;
    DEVGAMINGFRAntiRecoil_4 = FALSE;
    if(DEVGAMINGFRAntiRecoil_3) combo_run(Flash_ON); 
    else combo_run(Flash_OFF);}

    if(get_val(CIRCLE) && event_press(UP)) { //How to turn on/off Third set of DEVGAMINGFRAntiRecoil
    DEVGAMINGFRAntiRecoil_4 = !DEVGAMINGFRAntiRecoil_4;
    DEVGAMINGFRAntiRecoil_2 = FALSE;
    DEVGAMINGFRAntiRecoil_1 = FALSE;
    DEVGAMINGFRAntiRecoil_3 = FALSE;
    if(DEVGAMINGFRAntiRecoil_4) combo_run(Flash_ON); 
    else combo_run(Flash_OFF);}

    if(get_val(L2) && event_press(XB1_MENU)) { //How to turn on/off AimAbuse
    AimAbuse=!AimAbuse;
    if(AimAbuse) combo_run(Flash_ON); 
    else combo_run(Flash_OFF);}


/*
  _______    ____     _____    _____   _        ______      _____   _______    ____    _____    _____    ______   _____  
 |__   __|  / __ \   / ____|  / ____| | |      |  ____|    / ____| |__   __|  / __ \  |  __ \  |  __ \  |  ____| |  __ \ 
    | |    | |  | | | |  __  | |  __  | |      | |__      | (___      | |    | |  | | | |__) | | |__) | | |__    | |__) |
    | |    | |  | | | | |_ | | | |_ | | |      |  __|      \___ \     | |    | |  | | |  ___/  |  ___/  |  __|   |  _  / 
    | |    | |__| | | |__| | | |__| | | |____  | |____     ____) |    | |    | |__| | | |      | |      | |____  | | \ \ 
    |_|     \____/   \_____|  \_____| |______| |______|   |_____/     |_|     \____/  |_|      |_|      |______| |_|  \_\
*/                                                                                                                         
                                                                                                                         
    if(get_val(L2)) {
    if(event_press(UP)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(RIGHT)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(DOWN)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(LEFT)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(R3)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(L3)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(L1)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(R1)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(TOUCHPAD)) {
    Remove_BTTN=!Remove_BTTN;}
    set_val(UP,0);set_val(RIGHT,0);set_val(DOWN,0);set_val(LEFT,0);set_val(R3,0);set_val(L3,0);set_val(L1,0);set_val(R1,0);set_val(TOUCHPAD,0);}}
    
    if(get_val(CIRCLE)) {
    if(event_press(UP)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(RIGHT)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(DOWN)) {
    Remove_BTTN=!Remove_BTTN;}
    if(event_press(LEFT)) {
    Remove_BTTN=!Remove_BTTN;}
    set_val(UP,0);set_val(RIGHT,0);set_val(DOWN,0);set_val(LEFT,0);}
    
    if(get_val(OPTIONS)) {
    if(event_press(SHARE)) {
    Remove_BTTN=!Remove_BTTN;}
    set_val(SHARE,0);}

}
/*
   _____    ____    __  __   ____     ____      ____    _         ____     _____   _  __
  / ____|  / __ \  |  \/  | |  _ \   / __ \    |  _ \  | |       / __ \   / ____| | |/ /
 | |      | |  | | | \  / | | |_) | | |  | |   | |_) | | |      | |  | | | |      | ' / 
 | |      | |  | | | |\/| | |  _ <  | |  | |   |  _ <  | |      | |  | | | |      |  <  
 | |____  | |__| | | |  | | | |_) | | |__| |   | |_) | | |____  | |__| | | |____  | . \ 
  \_____|  \____/  |_|  |_| |____/   \____/    |____/  |______|  \____/   \_____| |_|
*/
 
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\
combo Auto_Run {
set_val(PS4_L3, 100);
wait(40);
set_val(PS4_L3, 0);
wait(40);
set_val(PS4_L3, 0);
}
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\
combo AR {
ARS = get_val(10) + AR;
if(ARS > 100) ARS = 100;
set_val(10,ARS * Invert_Look);
ARS = get_val(9) + DEVGAMINGFRAntiRecoil_Horizontal;
if(ARS > 100) ARS = 100;
set_val(9,ARS);
}
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\
combo AS { 
    set_val(RY,a_f(RY,AP));
    wait(Delay)
    set_val(RX,a_f(RX,AP));
    wait(Delay)
    set_val(RY,a_f(RY,AM));
    wait(Delay)
    set_val(RX,a_f(RX,AM));
    wait(Delay)
}
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\

combo Hold_Breath_ {
set_val(L3,0);
wait(60);
set_val(L3,100);
wait(110);
set_val(L3,0);
wait(110);}
	
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\

combo RF {
    set_val(R2,100);
    wait(40);
    set_val(R2,0);
    wait(RapidFire_Speed);
}
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\
 combo Burst {
    set_val(R2,100);
    wait(40);
    set_val(R2,0);
    wait(100);
    set_val(R2,100);
    wait(40);
    set_val(R2,0);
    wait(100);
    set_val(R2,100);
    wait(40);
    set_val(R2,0);
    wait(BurstFire_Speed);
}
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\
combo Strafe_Shot {
    set_val(PS4_LX, 100);
    wait(Strafe_Shot_Time);
    wait(50);
    set_val(PS4_LX, -100);
    wait(Strafe_Shot_Time);
    wait(50);
}
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\
combo RainbowLED {
    LED(2,0,2,0);
    wait(100);
    LED(0,0,0,2);
    wait(100);
    LED(0,2,2,0);
    wait(100);
}
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\
combo Menu_Rumble {
    set_rumble(RUMBLE_B,100);
    wait(200);
    reset_rumble();
    Toggle_Rumble = FALSE;
}
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\
combo Flash_ON {
    LED(0,0,2,0);
    set_rumble(RUMBLE_A,100);
    wait(400);
    reset_rumble();
} 
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\
combo Flash_OFF {
    LED(0,2,0,0);
    set_rumble(RUMBLE_B,100);
    wait(200);
    reset_rumble();
    set_rumble(RUMBLE_B,100);
    LED(0,2,0,0);
    wait(200);
    reset_rumble();
}
//★☆★☆★☆★☆★☆★★☆★☆★☆★☆★☆★★☆★☆★☆★\\
/*
  ______   _    _   _   _    _____   _______   _____    ____    _   _    _____ 
 |  ____| | |  | | | \ | |  / ____| |__   __| |_   _|  / __ \  | \ | |  / ____|
 | |__    | |  | | |  \| | | |         | |      | |   | |  | | |  \| | | (___  
 |  __|   | |  | | | . ` | | |         | |      | |   | |  | | | . ` |  \___ \ 
 | |      | |__| | | |\  | | |____     | |     _| |_  | |__| | | |\  |  ____) |
 |_|       \____/  |_| \_|  \_____|    |_|    |_____|  \____/  |_| \_| |_____/                                                                                                                                                              
*/                                               
function a_f(p,m) {
    if(abs(get_val(p)) < ARelease)
    return m;
    return get_val(p);
}
function LED(a,b,c,d) {
    set_led(LED_1,a);
    set_led(LED_2,b);
    set_led(LED_3,c);
    set_led(LED_4,d);
}   